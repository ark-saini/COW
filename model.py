import numpy as np
import pyvista as pv
from matplotlib import pyplot as plt
from matplotlib.animation import FuncAnimation
import matplotlib.cm as cm

# Manually defined data (Replace with actual content from your files)
bc_data = [
    [1, 1, 100],
    [26, 1, 50],
    [65, 1, 50],
    [66, 1, 100],
    [77, 1, 50],
    [90, 1, 50],
    [96, 1, 50],
    [103, 1, 100],
    [109, 1, 50]
]

config_data = """
<model header>
"3d network Tube Flow with variable diameter" author="Andreas Linninger" date="8/21/2013"
"3d network Tube Flow with variable diameter" author="Andreas Linninger" updated "3/6/2020"
"units for l and d in [mm] for the fMx and pMx files"
"units for l and d in [m] for the nwk file ---- needs conversion"
ProblemType = New Flw System
<meshfile>
meshfile=CoW.nwk
<constants>
MY=0.005
dt=0.005
steps=200
</constants>
<constants>
PN=1
MY=0.005
dt=0.005
steps=200
</constants>
<indices>
RICA=1
LICA=102
BA=65
RACA=76
LACA=95
RMCA=64
LMCA=109
RPCA=25
LPCA=89
</indices>
<Variables>
<Pressure VarId=1/>
<DyeConcentration VarId=2/>
</variables>
<BoundaryConditions>
bc0=<SubSection VarId=1 ID=1  type=Dirichlet value=13330.00/>
bc1=<SubSection VarId=1 ID=26  type=Dirichlet value=12000.00/>
bc2=<SubSection VarId=1 ID=65  type=Dirichlet value=12000.00/>
bc3=<SubSection VarId=1 ID=66  type=Dirichlet value=13340.00/>
bc4=<SubSection VarId=1 ID=77  type=Dirichlet value=12000.00/>
</BoundaryConditions>
"""

dia_data = [
    5.199013000E-003,
    5.199013000E-003,
    5.199013000E-003,
    5.199013000E-003,
    5.199013000E-003,
    5.199013000E-003,
    5.199013000E-003,
    5.199013000E-003,
    5.199013000E-003,
    5.199013000E-003,
    3.052302000E-003,
    3.052302000E-003,
    3.066762000E-003,
    3.066762000E-003,
    3.066762000E-003,
    3.066762000E-003,
    3.066762000E-003,
    3.909208000E-003,
    3.909208000E-003,
    3.909208000E-003,
    3.909208000E-003,
    3.909208000E-003,
    3.909208000E-003,
    3.909208000E-003,
    3.909208000E-003,
    5.261111000E-003,
    3.217408000E-003,
    3.217408000E-003,
    3.101347000E-003,
    3.101347000E-003,
    3.101347000E-003,
    3.101347000E-003,
    3.101347000E-003,
    3.101347000E-003,
    3.101347000E-003,
    3.101347000E-003,
    3.101347000E-003,
    3.101347000E-003,
    3.101347000E-003,
    3.101347000E-003,
    3.101347000E-003,
    3.101347000E-003,
    3.101347000E-003,
    3.101347000E-003,
    3.101347000E-003,
    3.101347000E-003,
    3.101347000E-003,
    3.101347000E-003,
    3.101347000E-003,
    3.101347000E-003,
    3.101347000E-003,
    3.101347000E-003,
    3.101347000E-003,
    3.101347000E-003,
    3.101347000E-003,
    3.101347000E-003,
    3.101347000E-003,
    3.101347000E-003,
    3.101347000E-003,
    3.101347000E-003,
    3.101347000E-003,
    3.101347000E-003,
    3.101347000E-003,
    3.101347000E-003,
    6.010634000E-003,
    5.564414000E-003,
    2.537343000E-003,
    3.277542000E-003,
    3.277542000E-003,
    3.277542000E-003,
    3.277542000E-003,
    3.277542000E-003,
    3.277542000E-003,
    3.277542000E-003,
    3.277542000E-003,
    3.277542000E-003,
    4.503456000E-003,
    4.503456000E-003,
    4.503456000E-003,
    4.503456000E-003,
    4.236254000E-003,
    4.236254000E-003,
    4.236254000E-003,
    4.236254000E-003,
    4.236254000E-003,
    4.236254000E-003,
    4.236254000E-003,
    4.236254000E-003,
    4.236254000E-003,
    3.216949000E-003,
    3.149937000E-003,
    3.149937000E-003,
    3.149937000E-003,
    3.149937000E-003,
    3.149937000E-003,
    4.355758000E-003,
    4.355758000E-003,
    4.355758000E-003,
    4.355758000E-003,
    4.355758000E-003,
    4.355758000E-003,
    4.355758000E-003,
    3.429734000E-003,
    2.896345000E-003,
    2.896345000E-003,
    2.896345000E-003,
    2.896345000E-003,
    2.896345000E-003,
    2.896345000E-003
]

ff_data = [
    4.1714346e+07,
    4.1714346e+07,
    4.1714346e+07,
    4.1714346e+07,
    4.1714346e+07,
    4.1714346e+07,
    4.1714346e+07,
    4.1714346e+07,
    4.1714346e+07,
    4.1714346e+07,
    5.5743949e+06,
    5.5743949e+06,
    4.7288741e+07,
    4.7288741e+07,
    4.7288741e+07,
    4.7288741e+07,
    4.7288741e+07,
    4.7403432e+07,
    4.7403432e+07,
    4.7403432e+07,
    4.7403432e+07,
    4.7403432e+07,
    4.7403432e+07,
    4.7403432e+07,
    4.7403432e+07,
    5.2977827e+07,
    2.0142317e+07,
    2.0142317e+07,
    2.7146424e+07,
    2.7146424e+07,
    2.7146424e+07,
    2.7146424e+07,
    2.7146424e+07,
    2.7146424e+07,
    2.7146424e+07,
    2.7146424e+07,
    2.7146424e+07,
    2.7146424e+07,
    2.7146424e+07,
    2.7146424e+07,
    2.7146424e+07,
    2.7146424e+07,
    2.7146424e+07,
    2.7146424e+07,
    2.7146424e+07,
    2.7146424e+07,
    2.7146424e+07,
    2.7146424e+07,
    2.7146424e+07,
    2.7146424e+07,
    2.7146424e+07,
    2.7146424e+07,
    2.7146424e+07,
    2.7146424e+07,
    2.7146424e+07,
    2.7146424e+07,
    2.7146424e+07,
    2.7146424e+07,
    2.7146424e+07,
    2.7146424e+07,
    2.7146424e+07,
    2.7146424e+07,
    2.7146424e+07,
    2.7146424e+07,
    1.4885717e+08,
    9.5879346e+07,
    1.0912351e+07,
    3.1054667e+07,
    3.1054667e+07,
    3.1054667e+07,
    3.1054667e+07,
    3.1054667e+07,
    3.1054667e+07,
    3.1054667e+07,
    3.1054667e+07,
    3.1054667e+07,
    2.9141497e+07,
    2.9141497e+07,
    2.9141497e+07,
    2.9141497e+07,
    6.6737849e+07,
    6.6737849e+07,
    6.6737849e+07,
    6.6737849e+07,
    6.6737849e+07,
    6.6737849e+07,
    6.6737849e+07,
    6.6737849e+07,
    6.6737849e+07,
    3.5820220e+07,
    2.4907870e+07,
    2.4907870e+07,
    2.4907870e+07,
    2.4907870e+07,
    2.4907870e+07,
    2.8261486e+07,
    2.8261486e+07,
    2.8261486e+07,
    2.8261486e+07,
    2.8261486e+07,
    2.8261486e+07,
    2.8261486e+07,
    5.7402983e+07,
    2.1582763e+07,
    2.1582763e+07,
    2.1582763e+07,
    2.1582763e+07,
    2.1582763e+07,
    2.1582763e+07
]


fMx_data = [
    [1, 1, 2, 0, 0],
    [1, 2, 3, 0, 0],
    [1, 3, 4, 0, 0],
    [1, 4, 5, 0, 0],
    [1, 5, 6, 0, 0],
    [1, 6, 7, 0, 0],
    [1, 7, 8, 0, 0],
    [1, 8, 9, 0, 0],
    [1, 9, 10, 0, 0],
    [1, 10, 11, 0, 0],
    [1, 12, 11, 0, 0],
    [1, 13, 12, 0, 0],
    [1, 11, 14, 0, 0],
    [1, 14, 15, 0, 0],
    [1, 15, 16, 0, 0],
    [1, 16, 17, 0, 0],
    [1, 17, 18, 0, 0],
    [1, 13, 19, 0, 0],
    [1, 19, 20, 0, 0],
    [1, 20, 21, 0, 0],
    [1, 21, 22, 0, 0],
    [1, 22, 23, 0, 0],
    [1, 23, 24, 0, 0],
    [1, 24, 25, 0, 0],
    [1, 25, 26, 0, 0],
    [1, 27, 13, 0, 0],
    [1, 18, 28, 0, 0],
    [1, 28, 29, 0, 0],
    [1, 18, 30, 0, 0],
    [1, 30, 31, 0, 0],
    [1, 31, 32, 0, 0],
    [1, 32, 33, 0, 0],
    [1, 33, 34, 0, 0],
    [1, 34, 35, 0, 0],
    [1, 35, 36, 0, 0],
    [1, 36, 37, 0, 0],
    [1, 37, 38, 0, 0],
    [1, 38, 39, 0, 0],
    [1, 39, 40, 0, 0],
    [1, 40, 41, 0, 0],
    [1, 41, 42, 0, 0],
    [1, 42, 43, 0, 0],
    [1, 43, 44, 0, 0],
    [1, 44, 45, 0, 0],
    [1, 45, 46, 0, 0],
    [1, 46, 47, 0, 0],
    [1, 47, 48, 0, 0],
    [1, 48, 49, 0, 0],
    [1, 49, 50, 0, 0],
    [1, 50, 51, 0, 0],
    [1, 51, 52, 0, 0],
    [1, 52, 53, 0, 0],
    [1, 53, 54, 0, 0],
    [1, 54, 55, 0, 0],
    [1, 55, 56, 0, 0],
    [1, 56, 57, 0, 0],
    [1, 57, 58, 0, 0],
    [1, 58, 59, 0, 0],
    [1, 59, 60, 0, 0],
    [1, 60, 61, 0, 0],
    [1, 61, 62, 0, 0],
    [1, 62, 63, 0, 0],
    [1, 63, 64, 0, 0],
    [1, 64, 65, 0, 0],
    [1, 66, 27, 0, 0],
    [1, 27, 67, 0, 0],
    [1, 68, 29, 0, 0],
    [1, 29, 69, 0, 0],
    [1, 69, 70, 0, 0],
    [1, 70, 71, 0, 0],
    [1, 71, 72, 0, 0],
    [1, 72, 73, 0, 0],
    [1, 73, 74, 0, 0],
    [1, 74, 75, 0, 0],
    [1, 75, 76, 0, 0],
    [1, 76, 77, 0, 0],
    [1, 67, 78, 0, 0],
    [1, 78, 79, 0, 0],
    [1, 79, 80, 0, 0],
    [1, 80, 81, 0, 0],
    [1, 67, 82, 0, 0],
    [1, 82, 83, 0, 0],
    [1, 83, 84, 0, 0],
    [1, 84, 85, 0, 0],
    [1, 85, 86, 0, 0],
    [1, 86, 87, 0, 0],
    [1, 87, 88, 0, 0],
    [1, 88, 89, 0, 0],
    [1, 89, 90, 0, 0],
    [1, 91, 68, 0, 0],
    [1, 68, 92, 0, 0],
    [1, 92, 93, 0, 0],
    [1, 93, 94, 0, 0],
    [1, 94, 95, 0, 0],
    [1, 95, 96, 0, 0],
    [1, 97, 81, 0, 0],
    [1, 98, 97, 0, 0],
    [1, 99, 98, 0, 0],
    [1, 100, 99, 0, 0],
    [1, 101, 100, 0, 0],
    [1, 102, 101, 0, 0],
    [1, 103, 102, 0, 0],
    [1, 81, 91, 0, 0],
    [1, 91, 104, 0, 0],
    [1, 104, 105, 0, 0],
    [1, 105, 106, 0, 0],
    [1, 106, 107, 0, 0],
    [1, 107, 108, 0, 0],
    [1, 108, 109, 0, 0]
]


grpMx_data = [[1, 1, 109, 0, 0, 0, 0]]

pMx_data = [
    [-5.396519000E-002, -3.908084000E-003, -9.849564000E-002],
    [-4.149985000E-002, -1.907444000E-002, -8.264564000E-002],
    [-2.767785000E-002, -3.376627000E-002, -6.766596000E-002],
    [-1.745295000E-002, -3.760315000E-002, -6.124280000E-002],
    [-2.596691000E-002, -4.637106000E-002, -6.531152000E-002],
    [-3.114422000E-002, -4.872974000E-002, -6.519650000E-002],
    [-3.137886000E-002, -5.266898000E-002, -6.060468000E-002],
    [-2.571966000E-002, -5.039919000E-002, -5.777715000E-002],
    [-2.103868000E-002, -4.527210000E-002, -5.690766000E-002],
    [-1.948666000E-002, -4.322233000E-002, -5.469882000E-002],
    [-2.030968000E-002, -4.045052000E-002, -5.187084000E-002],
    [-1.500000000E-002, -3.101044000E-002, -5.400000000E-002],
    [-1.310700000E-002, -1.587768000E-002, -5.976655000E-002],
    [-2.217545000E-002, -3.946500000E-002, -4.846630000E-002],
    [-2.332914000E-002, -3.872396000E-002, -4.771842000E-002],
    [-2.365201000E-002, -3.821041000E-002, -4.695622000E-002],
    [-2.380041000E-002, -3.701579000E-002, -4.547919000E-002],
    [-1.963800000E-002, -3.582337000E-002, -4.321114000E-002],
    [-2.682030000E-002,  1.623756000E-003, -5.024046000E-002],
    [-2.800335000E-002,  1.756707000E-002, -3.319280000E-002],
    [-2.898884000E-002,  5.622657000E-002, -1.997632000E-002],
    [-1.892495000E-002,  5.582312000E-002, -1.335776000E-002],
    [-2.223387000E-002,  5.635863000E-002, -2.651386000E-003],
    [-2.866870000E-002,  7.302636000E-002,  5.053264000E-003],
    [-3.792999000E-002,  8.316383000E-002,  1.166784000E-002],
    [-3.454572000E-002,  9.962290000E-002,  2.365084000E-002],
    [-4.214872000E-003, -1.373480000E-002, -6.925836000E-002],
    [-1.138815000E-002, -3.696786000E-002, -4.126445000E-002],
    [-6.132761000E-003, -4.140532000E-002, -3.979623000E-002],
    [-2.535554000E-002, -3.732238000E-002, -4.509359000E-002],
    [-3.115560000E-002, -3.757192000E-002, -4.128905000E-002],
    [-3.190242000E-002, -3.759332000E-002, -4.100595000E-002],
    [-3.281599000E-002, -3.763917000E-002, -4.076920000E-002],
    [-3.428105000E-002, -3.748850000E-002, -4.052675000E-002],
    [-3.448238000E-002, -3.750238000E-002, -4.048388000E-002],
    [-3.536154000E-002, -3.758545000E-002, -4.005297000E-002],
    [-3.588083000E-002, -3.770924000E-002, -3.977445000E-002],
    [-3.651651000E-002, -3.788096000E-002, -3.954454000E-002],
    [-3.682564000E-002, -3.795264000E-002, -3.940209000E-002],
    [-3.723992000E-002, -3.812072000E-002, -3.921458000E-002],
    [-3.811451000E-002, -3.833937000E-002, -3.886163000E-002],
    [-3.868688000E-002, -3.853249000E-002, -3.862898000E-002],
    [-3.929562000E-002, -3.874951000E-002, -3.834986000E-002],
    [-4.033613000E-002, -3.911761000E-002, -3.805963000E-002],
    [-4.094448000E-002, -3.926272000E-002, -3.787299000E-002],
    [-4.175953000E-002, -3.961134000E-002, -3.762572000E-002],
    [-4.248856000E-002, -3.990136000E-002, -3.733170000E-002],
    [-4.276520000E-002, -4.002977000E-002, -3.720756000E-002],
    [-4.343452000E-002, -4.021643000E-002, -3.711027000E-002],
    [-4.419406000E-002, -4.051597000E-002, -3.697829000E-002],
    [-4.477684000E-002, -4.067746000E-002, -3.731118000E-002],
    [-4.554800000E-002, -4.085242000E-002, -3.774487000E-002],
    [-4.579063000E-002, -4.100742000E-002, -3.787945000E-002],
    [-4.711546000E-002, -4.159310000E-002, -3.867592000E-002],
    [-4.768302000E-002, -4.206854000E-002, -3.898486000E-002],
    [-4.854171000E-002, -4.268421000E-002, -3.928321000E-002],
    [-4.970027000E-002, -4.362205000E-002, -3.952589000E-002],
    [-5.140267000E-002, -4.499500000E-002, -3.914165000E-002],
    [-5.336896000E-002, -4.638943000E-002, -3.824080000E-002],
    [-5.462207000E-002, -4.685971000E-002, -3.747151000E-002],
    [-5.542093000E-002, -4.692723000E-002, -3.690691000E-002],
    [-5.935255000E-002, -4.631028000E-002, -3.399773000E-002],
    [-6.513402000E-002, -4.101364000E-002, -2.762894000E-002],
    [-6.455470000E-002, -3.291481000E-002, -2.151126000E-002],
    [-7.054266000E-002, -1.898371000E-002, -1.118459000E-002],
    [-4.680649000E-003, -5.823513000E-004, -9.741560000E-002],
    [ 3.661379000E-003, -1.650005000E-002, -5.878910000E-002],
    [-5.380421000E-004, -4.441362000E-002, -4.393092000E-002],
    [-4.353913000E-003, -4.949979000E-002, -2.938532000E-002],
    [-4.351930000E-003, -4.958159000E-002, -2.914478000E-002],
    [-4.424871000E-003, -5.036278000E-002, -2.703255000E-002],
    [-4.537944000E-003, -5.131098000E-002, -2.529594000E-002],
    [-5.155676000E-003, -5.458785000E-002, -2.122456000E-002],
    [-5.054495000E-003, -5.904902000E-002, -1.678876000E-002],
    [-5.710204000E-003, -7.335492000E-002, -7.828205000E-003],
    [-3.144544000E-003, -7.189900000E-002,  9.450690000E-003],
    [-2.949428000E-003, -5.630451000E-002,  1.904996000E-002],
    [ 5.765396000E-003, -1.668006000E-002, -5.782733000E-002],
    [ 6.476954000E-003, -1.748159000E-002, -5.704630000E-002],
    [ 7.200000000E-003, -3.500000000E-002, -5.682313000E-002],
    [ 1.596695000E-002, -3.977566000E-002, -4.995036000E-002],
    [ 1.844355000E-002, -1.192199000E-003, -5.244795000E-002],
    [ 2.388304000E-002,  1.540360000E-002, -3.708445000E-002],
    [ 1.862252000E-002,  3.218878000E-002, -2.647909000E-002],
    [ 2.864639000E-002,  5.053362000E-002, -2.250470000E-002],
    [ 2.367533000E-002,  6.025588000E-002, -1.309044000E-002],
    [ 1.972320000E-002,  6.666900000E-002, -3.879394000E-003],
    [ 2.596707000E-002,  6.793799000E-002,  4.186891000E-003],
    [ 2.953731000E-002,  8.753204000E-002,  1.003915000E-002],
    [ 2.563901000E-002,  9.695727000E-002,  2.352847000E-002],
    [ 1.699295000E-002, -3.957923000E-002, -4.842511000E-002],
    [-4.262558000E-003, -5.126705000E-002, -3.317527000E-002],
    [-3.301271000E-003, -5.780751000E-002, -2.192053000E-002],
    [-2.151345000E-003, -7.052859000E-002, -2.266417000E-002],
    [-1.741403000E-003, -8.167766000E-002, -1.816646000E-002],
    [-2.475622000E-004, -8.811987000E-002,  2.537025000E-002],
    [ 1.208609000E-002, -4.600838000E-002, -5.407575000E-002],
    [ 1.330662000E-002, -4.951477000E-002, -5.745741000E-002],
    [ 2.030084000E-002, -5.098651000E-002, -6.315201000E-002],
    [ 1.402932000E-002, -4.630518000E-002, -6.537467000E-002],
    [ 1.547992000E-002, -3.368241000E-002, -6.273432000E-002],
    [ 2.069269000E-002, -2.999970000E-002, -7.971213000E-002],
    [ 3.787644000E-002, -6.262503000E-003, -8.788469000E-002],
    [ 2.957748000E-002, -3.909000000E-002, -4.078098000E-002],
    [ 3.859146000E-002, -4.600911000E-002, -3.871598000E-002],
    [ 5.836865000E-002, -5.211248000E-002, -3.257589000E-002],
    [ 7.063436000E-002, -5.259492000E-002, -7.251924000E-003],
    [ 5.800169000E-002, -5.045377000E-002, -2.430117000E-003],
    [ 6.683784000E-002, -4.788752000E-002, -1.399229000E-003]
]


pp_data = [
    1.0000000e+02,
    9.8122323e+01,
    9.6252533e+01,
    9.5309660e+01,
    9.4351085e+01,
    9.3927613e+01,
    9.3477045e+01,
    9.2976872e+01,
    9.2456186e+01,
    9.2203940e+01,
    9.1902957e+01,
    9.2826936e+01,
    9.4191746e+01,
    8.9111953e+01,
    8.8023620e+01,
    8.7344837e+01,
    8.6017096e+01,
    8.2611157e+01,
    8.7792229e+01,
    8.1609045e+01,
    7.0796787e+01,
    6.7608262e+01,
    6.4640157e+01,
    5.9492476e+01,
    5.5460209e+01,
    5.0000000e+01,
    9.5379788e+01,
    8.0515611e+01,
    7.8792495e+01,
    8.0238631e+01,
    7.7583963e+01,
    7.7278389e+01,
    7.6917016e+01,
    7.6346149e+01,
    7.6267243e+01,
    7.5891435e+01,
    7.5661144e+01,
    7.5394396e+01,
    7.5261361e+01,
    7.5075941e+01,
    7.4705665e+01,
    7.4458088e+01,
    7.4188847e+01,
    7.3752373e+01,
    7.3502750e+01,
    7.3150764e+01,
    7.2830306e+01,
    7.2704367e+01,
    7.2436017e+01,
    7.2119694e+01,
    7.1855677e+01,
    7.1510743e+01,
    7.1389191e+01,
    7.0756964e+01,
    7.0450132e+01,
    7.0030222e+01,
    6.9452629e+01,
    6.8603357e+01,
    6.7619139e+01,
    6.7028702e+01,
    6.6653673e+01,
    6.4768264e+01,
    6.0904806e+01,
    5.7016601e+01,
    5.0000000e+01,
    1.0000000e+02,
    9.3634371e+01,
    8.1393313e+01,
    7.4124981e+01,
    7.4035861e+01,
    7.3245513e+01,
    7.2550362e+01,
    7.0704428e+01,
    6.8497460e+01,
    6.2571990e+01,
    5.6423539e+01,
    5.0000000e+01,
    9.3420097e+01,
    9.3297633e+01,
    9.1678417e+01,
    9.0559190e+01,
    8.7636901e+01,
    8.1354317e+01,
    7.5806522e+01,
    7.0059038e+01,
    6.6164921e+01,
    6.2950974e+01,
    6.0174593e+01,
    5.4567719e+01,
    5.0000000e+01,
    8.9559574e+01,
    7.7011943e+01,
    7.2707631e+01,
    6.8488411e+01,
    6.4521621e+01,
    5.0000000e+01,
    9.1421021e+01,
    9.1934935e+01,
    9.2870116e+01,
    9.3702653e+01,
    9.5030662e+01,
    9.6886768e+01,
    1.0000000e+02,
    8.3670388e+01,
    7.9053548e+01,
    7.0423417e+01,
    5.9173715e+01,
    5.3701170e+01,
    5.0000000e+01
]

# Convert the data into numpy arrays or pandas dataframes as needed
bc = np.array(bc_data)
dia = np.array(dia_data)
ff = np.array(ff_data)
fMx = np.array(fMx_data)
grpMx = np.array(grpMx_data)
pMx = np.array(pMx_data)
pp = np.array(pp_data)

# Create the geometric model using PyVista
def create_vascular_model(pMx, fMx, dia):
    points = pMx
    edges = fMx[:, 1:3].astype(int)
    diameters = dia

    # Create the PolyData object
    lines = []
    for edge in edges:
        start, end = edge - 1
        lines.append([2, start, end])

    poly_data = pv.PolyData()
    poly_data.points = points
    poly_data.lines = lines

    # Ensure the number of diameters matches the number of cells
    if len(diameters) != poly_data.n_cells:
        raise ValueError(f"Number of diameters ({len(diameters)}) does not match the number of cells ({poly_data.n_cells}).")

    poly_data['Diameter'] = diameters  # Assign diameters to cells

    return poly_data

vascular_model = create_vascular_model(pMx, fMx, dia)

# Visualize the geometric model
def visualize_vascular_model(mesh):
    plotter = pv.Plotter()
    plotter.add_mesh(mesh, line_width=5)
    plotter.show()

visualize_vascular_model(vascular_model)

# Export the model
def export_model(mesh, filename):
    mesh.save(filename)

export_model(vascular_model, 'vascular_model.vtp')

# Animated visualization with Matplotlib
def animate_vascular_model(pMx, fMx, dia, pressures):
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')

    def update(num, pMx, fMx, dia, pressures):
        ax.clear()
        points = pMx
        edges = fMx[:, 1:3].astype(int)
        current_pressures = pressures[:, num]

        for i, edge in enumerate(edges):
            start, end = edge - 1
            x = [points[start, 0], points[end, 0]]
            y = [points[start, 1], points[end, 1]]
            z = [points[start, 2], points[end, 2]]
            color = cm.jet(current_pressures[i] / np.max(current_pressures))
            ax.plot(x, y, z, color=color, linewidth=dia[i])

        ax.set_xlim([np.min(points[:, 0]), np.max(points[:, 0])])
        ax.set_ylim([np.min(points[:, 1]), np.max(points[:, 1])])
        ax.set_zlim([np.min(points[:, 2]), np.max(points[:, 2])])
        ax.set_title(f'Simulation Time Step {num}')

    # Assuming `pressures` is a 2D array with shape (number of edges, number of time steps)
    ani = FuncAnimation(fig, update, frames=pressures.shape[1], fargs=(pMx, fMx, dia, pressures), interval=200)
    ani.save('vascular_model.gif', writer='imagemagick')
    plt.show()

# Generate some dummy pressure data for the sake of the example
num_edges = fMx.shape[0]
num_time_steps = 100
pressures = np.random.rand(num_edges, num_time_steps) * 100  # Dummy data

animate_vascular_model(pMx, fMx, dia, pressures)
